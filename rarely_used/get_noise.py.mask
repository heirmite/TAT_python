#!/usr/bin/python
'''
Program:
This is a program to demo the style of my code. 
method:
1. std_code.py [list name]
editor Jacob975
20170604 version alpha 1
#################################
update log
'''

from sys import argv
import numpy as np
import matplotlib.pyplot as plt
import pyfits
import time
import curvefit
from numpy import pi, r_
from scipy import optimize

def readfile(filename):
    file = open(filename)
    answer_1 = file.read()
    answer=answer_1.split("\n")
    return answer

def pow_function(x, base, const, pow_):
    return np.power(base, np.power(x, pow_)) + const

def moment_pow_fitting(x_plt, value):
    const = value[-1]
    pow_ = np.log((value[1]-const)/(value[0]-const))
    base = np.power((value[0] - const), 2)/(value[0] - const)
    return (base, const, pow_)

def pow_fitting(x_plt, value):
    moment = moment_pow_fitting(x_plt, value)
    paras, cov = optimize.curve_fit(pow_function, x_plt, value, p0 = moment)
    return paras, cov
    
#--------------------------------------------
# main code
# measure times
start_time = time.time()
# get all names of fits
VERBOSE = 3

list_name=argv[-1]
fits_list=readfile(list_name)
del fits_list[-1]

sum_fits = []
x_plt = []
value = []
for i in xrange(len(fits_list)):
    data = pyfits.getdata(fits_list[i])
    # get exposure time
    imhA = pyfits.getheader(fits_list[i])
    exptime = imhA['EXPTIME']
    if sum_fits == []:
        sum_fits = data
    else:
        sum_fits = np.add(sum_fits, data)
    div_fits = np.divide(sum_fits, i+1)
    paras, cov = curvefit.hist_gaussian_fitting(fits_list[i], div_fits, shift = -7)
    data_mean = paras[0]
    data_std = paras[1]
    x_plt.append(exptime*(i+1))
    value.append(data_std)
    if VERBOSE>0:print "number of fits:", i, " mean:", data_mean, " std:", data_std
paras, cov = pow_fitting(x_plt, value)
x_plt = np.array(x_plt)
value = np.array(value)
plt.plot(x_plt, value, 'ro')
if VERBOSE>1:print "base: ", paras[0], "const: ", paras[1], "pow_: ", paras[2]
print cov
if VERBOSE>2:
    # draw
    x_plt_ref = np.linspace(0, x_plt[-1], len(x_plt)*10)
    plt.plot(x_plt_ref, pow_function(x_plt_ref, paras[0], paras[1], paras[2]), 'r-', lw= 2)
    axes = plt.gca()
    axes.set_xlim([0, x_plt[-1]])
    plt.show()
# measuring time
elapsed_time = time.time() - start_time
print "Exiting Main Program, spending ", elapsed_time, "seconds."
